{
  "name": "Button Gesture",
  "status": "experimental",
  "shortId": "buttonGesture",
  "camelName": "buttonGesture",
  "shortName": "buttonGesture",
  "extends": [
    "_base",
    "_sensor"
  ],
  "notes": {
    "short": "An abstract button supporting high-level feature events like click, click-and-hold, double-click, and double-click-and-hold.",
    "events": "TODO: is held time useful at all for a high-level gesture service?"
  },
  "classIdentifier": 337748893,
  "enums": {},
  "constants": {},
  "packets": [
    {
      "kind": "const",
      "name": "instance_name",
      "identifier": 265,
      "description": "A friendly name that describes the role of this service instance in the device.\nIt often corresponds to what's printed on the device:\nfor example, `A` for button A, or `S0` for servo channel 0.\nWords like `left` should be avoided because of localization issues (unless they are printed on the device).",
      "fields": [
        {
          "name": "_",
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "identifierName": "instance_name",
      "packFormat": "s",
      "derived": "_base"
    },
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 259,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe Jacdac status/error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the announce packet. If a service implements this register,\nit should also support the ``status_code_changed`` event defined below.",
      "fields": [
        {
          "name": "code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "event",
      "name": "status_code_changed",
      "identifier": 4,
      "description": "Notifies that the status code of the service changed.",
      "fields": [
        {
          "name": "code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code_changed",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "rw",
      "name": "streaming_samples",
      "identifier": 3,
      "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
      "fields": [
        {
          "name": "_",
          "unit": "#",
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        }
      ],
      "internal": true,
      "identifierName": "streaming_samples",
      "packFormat": "u8",
      "derived": "_sensor"
    },
    {
      "kind": "rw",
      "name": "streaming_interval",
      "identifier": 4,
      "description": "Period between packets of data when streaming in milliseconds.",
      "fields": [
        {
          "name": "_",
          "unit": "ms",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true,
          "defaultValue": 100,
          "typicalMin": 1,
          "typicalMax": 60000
        }
      ],
      "identifierName": "streaming_interval",
      "packFormat": "u32",
      "derived": "_sensor"
    },
    {
      "kind": "const",
      "name": "streaming_preferred_interval",
      "identifier": 258,
      "description": "Preferred default streaming interval for sensor in milliseconds.",
      "fields": [
        {
          "name": "_",
          "unit": "ms",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "internal": true,
      "optional": true,
      "identifierName": "streaming_preferred_interval",
      "packFormat": "u32",
      "derived": "_sensor"
    },
    {
      "kind": "event",
      "name": "click",
      "identifier": 133,
      "description": "Emitted when the button is clicked (down, then up shortly after).\nEvent emitted on the release edge.",
      "fields": []
    },
    {
      "kind": "event",
      "name": "clickHold",
      "identifier": 134,
      "description": "Emitted when the button is clicked and held (down, and held for some period of time).",
      "fields": []
    },
    {
      "kind": "event",
      "name": "doubleClick",
      "identifier": 135,
      "description": "Emitted when the button is double-clicked.\nNote that a separate (single) click event is generated on the first edge, to allow the events to be responsive.",
      "fields": []
    },
    {
      "kind": "event",
      "name": "multiClick",
      "identifier": 136,
      "description": "",
      "fields": [
        {
          "name": "clicks",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "packFormat": "u32"
    },
    {
      "kind": "event",
      "name": "multiClickHold",
      "identifier": 137,
      "description": "",
      "fields": [
        {
          "name": "clicks",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "packFormat": "u32"
    },
    {
      "kind": "event",
      "name": "holdRelease",
      "identifier": 144,
      "description": "Emitted when the button is released after a click-and-hold event.\n`heldTime` is the total time the button is held down (not including any prior clicks, eg for a double-click-into-hold)",
      "fields": [
        {
          "name": "heldTime",
          "unit": "ms",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "packFormat": "u32"
    }
  ],
  "tags": [
    "C",
    "8bit",
    "padauk"
  ],
  "group": "Button"
}